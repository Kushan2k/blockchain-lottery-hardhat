{
  "address": "0x80e5DF9321009f4374320e007cD388a1288674a5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "subID",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_callbackgaslimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "msg",
          "type": "string"
        }
      ],
      "name": "Lottery_Active",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "msg",
          "type": "string"
        }
      ],
      "name": "Lottery_NotActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "msg",
          "type": "string"
        }
      ],
      "name": "Lottery__EntranceFees",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "msg",
          "type": "string"
        }
      ],
      "name": "Lottery__FaildToTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughPlayers",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address payable",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerSelected",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntraceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getarr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "i_prev_winners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_time_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_enties",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_randomWord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7396135d061d1e9caa2445e1a37cc408f44385d4461293751092060cb119380",
  "receipt": {
    "to": null,
    "from": "0x669406ff143A2869D3709c888AF6eA15a419c498",
    "contractAddress": "0x80e5DF9321009f4374320e007cD388a1288674a5",
    "transactionIndex": 21,
    "gasUsed": "1583896",
    "logsBloom": "0x
    "blockHash": "0xb9617815a9f2a8e441385153ea0504cf3ee02e3de0a77cf8a1e8c1e4cf19be55",
    "transactionHash": "0xa7396135d061d1e9caa2445e1a37cc408f44385d4461293751092060cb119380",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 4313745,
        "transactionHash": "0xa7396135d061d1e9caa2445e1a37cc408f44385d4461293751092060cb119380",
        "address": "0x80e5DF9321009f4374320e007cD388a1288674a5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000669406ff143a2869d3709c888af6ea15a419c498"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0xb9617815a9f2a8e441385153ea0504cf3ee02e3de0a77cf8a1e8c1e4cf19be55"
      }
    ],
    "blockNumber": 4313745,
    "cumulativeGasUsed": "3839434",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    4822,
    300000
  ],
  "numDeployments": 1,
  "solcInputHash": "3acbd064da76843dddfa0f797bd5305f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"subID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackgaslimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"Lottery_Active\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"Lottery_NotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"Lottery__EntranceFees\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"Lottery__FaildToTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughPlayers\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerSelected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntraceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getarr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"i_prev_winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_time_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_enties\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_randomWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {VRFCoordinatorV2Interface} \\r\\nfrom \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport {VRFConsumerBaseV2} \\r\\nfrom \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport {Ownable} \\r\\nfrom \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// import {AutomationCompatibleInterface} \\r\\n// from \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2,Ownable{\\r\\n\\r\\n    //state variables\\r\\n    address payable[] public s_enties;\\r\\n    VRFCoordinatorV2Interface internal immutable i_vrfInterface;\\r\\n    address internal immutable i_owner;\\r\\n    bytes32 internal immutable keyhash;\\r\\n    uint32 immutable internal num_words;\\r\\n    uint16 immutable internal requestConfirmations;\\r\\n    uint32 immutable internal callbackGasLimit;\\r\\n    uint64 immutable  s_subscriptionId;\\r\\n    address[] public i_prev_winners;\\r\\n\\r\\n    uint256 public s_randomWord;\\r\\n    uint256 internal immutable I_entrace_fee;\\r\\n    LotteryState public isActive;\\r\\n    uint256 constant public i_time_interval=100000;\\r\\n    uint256 internal starttime;\\r\\n\\r\\n    //erros\\r\\n\\r\\n    error Lottery__EntranceFees(string msg);\\r\\n    error Lottery__FaildToTransfer(string msg);\\r\\n    error Lottery_NotActive(string msg);\\r\\n    error Lottery_Active(string msg);\\r\\n    error Lottery__NotEnoughPlayers();\\r\\n    \\r\\n\\r\\n    \\r\\n\\r\\n    //events\\r\\n    event RequestSent(uint256 indexed requestId, uint32 indexed numWords);\\r\\n    event RequestFulfilled(uint256 indexed requestId, uint256[] indexed randomWords);\\r\\n    event WinnerSelected(address payable indexed winner);\\r\\n\\r\\n\\r\\n\\r\\n    //lottry states\\r\\n    enum LotteryState {\\r\\n        OPEN,CLOSE,CALCULATING//0,1,2\\r\\n    }\\r\\n\\r\\n\\r\\n    //vrf cordinator 0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625 for sepolia\\r\\n    //keyhash sepolia 0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c\\r\\n\\r\\n\\r\\n    constructor(\\r\\n        address vrfCordinatorAddress,\\r\\n        bytes32 _keyhash,\\r\\n        uint32 subID,\\r\\n        uint32 _callbackgaslimit\\r\\n        \\r\\n        ) \\r\\n        VRFConsumerBaseV2(vrfCordinatorAddress)\\r\\n        {\\r\\n            i_vrfInterface=VRFCoordinatorV2Interface(vrfCordinatorAddress);\\r\\n            i_owner=msg.sender;\\r\\n            keyhash=_keyhash;\\r\\n            num_words=1;\\r\\n            s_subscriptionId=subID;\\r\\n            callbackGasLimit=_callbackgaslimit;\\r\\n            requestConfirmations = 3;\\r\\n            I_entrace_fee=0.01 ether;\\r\\n\\r\\n            starttime=block.timestamp;\\r\\n\\r\\n            isActive=LotteryState.OPEN;\\r\\n\\r\\n           \\r\\n    }\\r\\n\\r\\n    //functions\\r\\n\\r\\n    /*\\r\\n    @dev function for enter to the lotter\\r\\n    @notic caller must pay entrance fees of 0.001 eth\\r\\n    */\\r\\n    function enter() external  payable {\\r\\n\\r\\n        if(msg.value!=I_entrace_fee){\\r\\n            revert Lottery__EntranceFees(\\\"please pay the correct entrace fees\\\");\\r\\n        }\\r\\n        if(isActive!=LotteryState.OPEN){\\r\\n            revert Lottery_NotActive(\\\"Lottery is not active yet!\\\");\\r\\n        }\\r\\n\\r\\n        s_enties.push(payable(msg.sender));\\r\\n\\r\\n    }\\r\\n\\r\\n    function pickWinner() public onlyOwner{\\r\\n        //call the requestRandomwords function here\\r\\n\\r\\n        require(block.timestamp-starttime>=i_time_interval,\\\"Not enough time\\\");\\r\\n\\r\\n        requestRandomWords();\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n    @dev requesting random words\\r\\n    @notic entries should be greater than 0\\r\\n            lottery need to be in open state\\r\\n\\r\\n    */\\r\\n\\r\\n    function requestRandomWords() internal  {\\r\\n\\r\\n        if(!(s_enties.length>0)){\\r\\n            revert Lottery__NotEnoughPlayers();\\r\\n        }\\r\\n\\r\\n        if(isActive == LotteryState.CALCULATING || isActive== LotteryState.CLOSE){\\r\\n            revert Lottery_NotActive(\\\"Lottery is not active at the moment\\\");\\r\\n        }\\r\\n\\r\\n        isActive=LotteryState.CALCULATING;\\r\\n\\r\\n        uint256 requestId=i_vrfInterface.requestRandomWords(\\r\\n            keyhash, \\r\\n            s_subscriptionId, \\r\\n            requestConfirmations,\\r\\n             callbackGasLimit, \\r\\n             num_words\\r\\n             );\\r\\n        \\r\\n        emit RequestSent(requestId,num_words);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n    @dev this will be called by the subscriber\\r\\n    */\\r\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override{\\r\\n\\r\\n            s_randomWord=randomWords[0];\\r\\n            \\r\\n            uint256 index=s_randomWord % s_enties.length;\\r\\n            \\r\\n           \\r\\n            address payable winner=s_enties[index];\\r\\n            \\r\\n            i_prev_winners.push(winner);\\r\\n            \\r\\n            (bool suc,)=winner.call{value:address(this).balance}(\\\"\\\");\\r\\n\\r\\n            if(!suc){\\r\\n                revert Lottery__FaildToTransfer(\\\"Tranfer failed!\\\");\\r\\n            }\\r\\n            isActive=LotteryState.OPEN;\\r\\n\\r\\n            \\r\\n            \\r\\n            emit  WinnerSelected(winner);\\r\\n            \\r\\n            starttime=block.timestamp;\\r\\n            \\r\\n           //reset the players array don't work\\r\\n           restEnties();\\r\\n            \\r\\n    } \\r\\n\\r\\n    function restEnties() internal {\\r\\n        s_enties=new address payable[](0);\\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n    function getarr() public view returns (uint256) {\\r\\n        return s_enties.length;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getOwner() public view returns(address){\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getEntraceFee()public view returns(uint256){\\r\\n        return I_entrace_fee;\\r\\n    }\\r\\n\\r\\n    function getLatestWinner() public view returns(address){\\r\\n\\r\\n        require(i_prev_winners.length>0,\\\"No any previous winners\\\");\\r\\n        return  i_prev_winners[i_prev_winners.length-1];\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    returns 0 for open\\r\\n    1 for closed\\r\\n    2 for calculating\\r\\n    */\\r\\n    function getState() public view returns(LotteryState){\\r\\n        return isActive;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x5f35d319b486f8f5d2c4cefd81c24df7dd1d12515a9532f024ea46d8cbcc17c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063893d20e81161008a578063e895585511610059578063e8955855146102f6578063e97dcb6214610321578063f2fde38b1461032b578063fd210fd914610354576100f3565b8063893d20e8146102385780638da5cb5b14610263578063c40180b61461028e578063ce147cf3146102cb576100f3565b80634fdd3b64116100c65780634fdd3b64146101b45780635d495aea146101df5780636bc7deae146101f6578063715018a614610221576100f3565b80631865c57d146100f85780631fe543e31461012357806322f3e2d41461014c5780632f3e644414610177575b600080fd5b34801561010457600080fd5b5061010d61037f565b60405161011a91906110c5565b60405180910390f35b34801561012f57600080fd5b5061014a60048036038101906101459190611283565b610396565b005b34801561015857600080fd5b50610161610456565b60405161016e91906110c5565b60405180910390f35b34801561018357600080fd5b5061019e600480360381019061019991906112df565b610469565b6040516101ab919061134d565b60405180910390f35b3480156101c057600080fd5b506101c96104a8565b6040516101d6919061134d565b60405180910390f35b3480156101eb57600080fd5b506101f4610546565b005b34801561020257600080fd5b5061020b61061f565b6040516102189190611377565b60405180910390f35b34801561022d57600080fd5b5061023661062c565b005b34801561024457600080fd5b5061024d6106b4565b60405161025a919061134d565b60405180910390f35b34801561026f57600080fd5b506102786106dc565b604051610285919061134d565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906112df565b610705565b6040516102c291906113b3565b60405180910390f35b3480156102d757600080fd5b506102e0610744565b6040516102ed9190611377565b60405180910390f35b34801561030257600080fd5b5061030b61076c565b6040516103189190611377565b60405180910390f35b610329610773565b005b34801561033757600080fd5b50610352600480360381019061034d91906113fa565b6108b0565b005b34801561036057600080fd5b506103696109a7565b6040516103769190611377565b60405180910390f35b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161043f929190611427565b60405180910390fd5b61045282826109ad565b5050565b600460009054906101000a900460ff1681565b6002818154811061047957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600280549050116104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e8906114ad565b60405180910390fd5b6002600160028054905061050591906114fc565b8154811061051657610515611530565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61054e610bbc565b73ffffffffffffffffffffffffffffffffffffffff1661056c6106dc565b73ffffffffffffffffffffffffffffffffffffffff16146105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b9906115ab565b60405180910390fd5b620186a0600554426105d491906114fc565b1015610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90611617565b60405180910390fd5b61061d610bc4565b565b6000600180549050905090565b610634610bbc565b73ffffffffffffffffffffffffffffffffffffffff166106526106dc565b73ffffffffffffffffffffffffffffffffffffffff16146106a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069f906115ab565b60405180910390fd5b6106b26000610e81565b565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001818154811061071557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b620186a081565b7f000000000000000000000000000000000000000000000000000000000000000034146107d5576040517f948a75380000000000000000000000000000000000000000000000000000000081526004016107cc906116a9565b60405180910390fd5b600060028111156107e9576107e861104e565b5b600460009054906101000a900460ff16600281111561080b5761080a61104e565b5b1461084b576040517f1b6a610f00000000000000000000000000000000000000000000000000000000815260040161084290611715565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6108b8610bbc565b73ffffffffffffffffffffffffffffffffffffffff166108d66106dc565b73ffffffffffffffffffffffffffffffffffffffff161461092c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610923906115ab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361099b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610992906117a7565b60405180910390fd5b6109a481610e81565b50565b60035481565b806000815181106109c1576109c0611530565b5b602002602001015160038190555060006001805490506003546109e491906117f6565b90506000600182815481106109fc576109fb611530565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610ab290611858565b60006040518083038185875af1925050503d8060008114610aef576040519150601f19603f3d011682016040523d82523d6000602084013e610af4565b606091505b5050905080610b38576040517f4e0bc9f1000000000000000000000000000000000000000000000000000000008152600401610b2f906118b9565b60405180910390fd5b6000600460006101000a81548160ff02191690836002811115610b5e57610b5d61104e565b5b02179055508173ffffffffffffffffffffffffffffffffffffffff167f1d4c260f1824cd028e6c9e6e31c3a0b94f2513e7a641113ec759d382f9bdd5a160405160405180910390a242600581905550610bb5610f45565b5050505050565b600033905090565b600060018054905011610c03576040517f5a77e4b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280811115610c1657610c1561104e565b5b600460009054906101000a900460ff166002811115610c3857610c3761104e565b5b1480610c77575060016002811115610c5357610c5261104e565b5b600460009054906101000a900460ff166002811115610c7557610c7461104e565b5b145b15610cb7576040517f1b6a610f000000000000000000000000000000000000000000000000000000008152600401610cae9061194b565b60405180910390fd5b6002600460006101000a81548160ff02191690836002811115610cdd57610cdc61104e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b8152600401610de59594939291906119e3565b6020604051808303816000875af1158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e289190611a4b565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16817fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee60405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600067ffffffffffffffff811115610f6057610f5f611140565b5b604051908082528060200260200182016040528015610f8e5781602001602082028036833780820191505090505b5060019080519060200190610fa4929190610fa7565b50565b828054828255906000526020600020908101928215611020579160200282015b8281111561101f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610fc7565b5b50905061102d9190611031565b5090565b5b8082111561104a576000816000905550600101611032565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061108e5761108d61104e565b5b50565b600081905061109f8261107d565b919050565b60006110af82611091565b9050919050565b6110bf816110a4565b82525050565b60006020820190506110da60008301846110b6565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611107816110f4565b811461111257600080fd5b50565b600081359050611124816110fe565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111788261112f565b810181811067ffffffffffffffff8211171561119757611196611140565b5b80604052505050565b60006111aa6110e0565b90506111b6828261116f565b919050565b600067ffffffffffffffff8211156111d6576111d5611140565b5b602082029050602081019050919050565b600080fd5b60006111ff6111fa846111bb565b6111a0565b90508083825260208201905060208402830185811115611222576112216111e7565b5b835b8181101561124b57806112378882611115565b845260208401935050602081019050611224565b5050509392505050565b600082601f83011261126a5761126961112a565b5b813561127a8482602086016111ec565b91505092915050565b6000806040838503121561129a576112996110ea565b5b60006112a885828601611115565b925050602083013567ffffffffffffffff8111156112c9576112c86110ef565b5b6112d585828601611255565b9150509250929050565b6000602082840312156112f5576112f46110ea565b5b600061130384828501611115565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113378261130c565b9050919050565b6113478161132c565b82525050565b6000602082019050611362600083018461133e565b92915050565b611371816110f4565b82525050565b600060208201905061138c6000830184611368565b92915050565b600061139d8261130c565b9050919050565b6113ad81611392565b82525050565b60006020820190506113c860008301846113a4565b92915050565b6113d78161132c565b81146113e257600080fd5b50565b6000813590506113f4816113ce565b92915050565b6000602082840312156114105761140f6110ea565b5b600061141e848285016113e5565b91505092915050565b600060408201905061143c600083018561133e565b611449602083018461133e565b9392505050565b600082825260208201905092915050565b7f4e6f20616e792070726576696f75732077696e6e657273000000000000000000600082015250565b6000611497601783611450565b91506114a282611461565b602082019050919050565b600060208201905081810360008301526114c68161148a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611507826110f4565b9150611512836110f4565b925082820390508181111561152a576115296114cd565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611595602083611450565b91506115a08261155f565b602082019050919050565b600060208201905081810360008301526115c481611588565b9050919050565b7f4e6f7420656e6f7567682074696d650000000000000000000000000000000000600082015250565b6000611601600f83611450565b915061160c826115cb565b602082019050919050565b60006020820190508181036000830152611630816115f4565b9050919050565b7f706c65617365207061792074686520636f727265637420656e7472616365206660008201527f6565730000000000000000000000000000000000000000000000000000000000602082015250565b6000611693602383611450565b915061169e82611637565b604082019050919050565b600060208201905081810360008301526116c281611686565b9050919050565b7f4c6f7474657279206973206e6f74206163746976652079657421000000000000600082015250565b60006116ff601a83611450565b915061170a826116c9565b602082019050919050565b6000602082019050818103600083015261172e816116f2565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611791602683611450565b915061179c82611735565b604082019050919050565b600060208201905081810360008301526117c081611784565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611801826110f4565b915061180c836110f4565b92508261181c5761181b6117c7565b5b828206905092915050565b600081905092915050565b50565b6000611842600083611827565b915061184d82611832565b600082019050919050565b600061186382611835565b9150819050919050565b7f5472616e666572206661696c6564210000000000000000000000000000000000600082015250565b60006118a3600f83611450565b91506118ae8261186d565b602082019050919050565b600060208201905081810360008301526118d281611896565b9050919050565b7f4c6f7474657279206973206e6f742061637469766520617420746865206d6f6d60008201527f656e740000000000000000000000000000000000000000000000000000000000602082015250565b6000611935602383611450565b9150611940826118d9565b604082019050919050565b6000602082019050818103600083015261196481611928565b9050919050565b6000819050919050565b61197e8161196b565b82525050565b600067ffffffffffffffff82169050919050565b6119a181611984565b82525050565b600061ffff82169050919050565b6119be816119a7565b82525050565b600063ffffffff82169050919050565b6119dd816119c4565b82525050565b600060a0820190506119f86000830188611975565b611a056020830187611998565b611a1260408301866119b5565b611a1f60608301856119d4565b611a2c60808301846119d4565b9695505050505050565b600081519050611a45816110fe565b92915050565b600060208284031215611a6157611a606110ea565b5b6000611a6f84828501611a36565b9150509291505056fea2646970667358221220948a432cb6e0f9b9a9283df16aec77bab709996cfab2d85b163b0e4633803e7864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1119,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1252,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_enties",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1270,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "i_prev_winners",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1272,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_randomWord",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1277,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "isActive",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(LotteryState)1321"
      },
      {
        "astId": 1282,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "starttime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)1321": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}